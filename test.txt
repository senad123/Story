Certainly! You can make your code more concise and adhere to best practices. Here's a refactored version of your code with comments explaining each part:

```javascript
// Function to perform database operations
async function addVisitedCountry(input, currentUserId) {
  try {
    // Query to get the country code
    const countryQueryResult = await db.query(
      "SELECT country_code FROM countries WHERE LOWER(country_name) LIKE '%' || $1 || '%';",
      [input.toLowerCase()]
    );

    // Check if a country code was found
    if (countryQueryResult.rows.length === 0) {
      throw new Error('Country not found');
    }

    // Extracting the country code
    const countryCode = countryQueryResult.rows[0].country_code;

    // Inserting into visited_countries table
    await db.query(
      "INSERT INTO visited_countries (country_code, user_id) VALUES ($1, $2)",
      [countryCode, currentUserId]
    );

    // Redirect on successful insertion
    res.redirect("/");
  } catch (err) {
    // Logging errors
    console.error(err);

    // Handling different types of errors
    if (err.message === 'Country not found') {
      // Specific handling for 'Country not found' error
      res.status(404).send('Country not found');
    } else {
      // General error response
      res.status(500).send('An error occurred');
    }
  }
}

// Example of calling the function
// addVisitedCountry(input, currentUserId);
```

### Best Practices Illustrated:

1. **Single Responsibility**: The function `addVisitedCountry` encapsulates the logic for adding a visited country. This adheres to the single responsibility principle.

2. **Error Checking**: Before proceeding to the insert operation, it checks if the country was found. This prevents inserting invalid data.

3. **Centralized Error Handling**: The `try-catch` block is used at a higher level to handle errors from both queries. This reduces nested `try-catch` blocks and makes the code cleaner.

4. **Specific Error Responses**: By checking the error message, the function can send more meaningful responses, like a 404 status when a country is not found.

5. **Use of Async-Await**: The use of `async-await` makes the code easier to read and reason about, especially with asynchronous database operations.

6. **Logging Errors**: Errors are logged to the console for debugging purposes.

7. **Handling Different Errors Differently**: Different errors are handled according to their types, allowing for more granular control over error responses.

This approach simplifies the code, makes it more maintainable, and improves error handling.